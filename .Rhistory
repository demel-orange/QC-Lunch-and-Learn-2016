# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("methods","statmod","stats","graphics","RCurl","jsonlite","tools","utils")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-turchin/6/R")))
library(h2o)
localH2O = h2o.init(nthreads=-1)
# Finally, let's run a demo to see H2O at work.
demo(h2o.kmeans)
demo(h2o.kmeans)
list.of.packages <- c("devtools", "pacman", "dplyr", "DT", "ggthemes",
list.of.packages <- c("devtools", "pacman", "dplyr", "DT", "ggthemes",
"gridExtra", "psych", "dplyr", "RColorBrewer", "reshape2",
"RJDBC", "rjson", "rJava", "rgeos", "RODBC", "scales",
"XLConnect", "XLConnectJars", "UScensus2010blkgrp", "readr",
"scales", "ggplot2", "geoR", "ggvis", "mapdata", "maps",
"maptools", "RandomFields", "plotKML", "rgdal", "rgeos",
"shapefiles", "sp", "spatstat", "raster", "rasterVis", "rts",
"USAboundaries", "UScensus2010", "sjPlot")
new.packages <- list.of.packages[!(list.of.packages
%in% installed.packages()[,"Package"])
]
if(length(new.packages)) install.packages(new.packages)
pacman::p_install_gh(c(
"hadley/stringr",
"ramnathv/rCharts",
"hadley/httr",
"hadley/readr",
"hadley/tidyr",
"hadley/readxl",
"rstudio/leaflet",
"rstudio/htmltools",
"smbache/magrittr",
"rstudio/rsconnect",
"rstudio/shiny",
"trestletech/shinyRGL",
"rstudio/shinydashboard",
"rstudio/shinythemes",
"thomasp85/shinyFiles",
"daattali/shinyjs",
"rstudio/shinybootstrap2",
"hadley/lubridate",
"nicolewhite/RNeo4j",
"sjPlot/sjmisc",
"sjPlot/devel",
"hadley/rvest",
"hadley/purrr")
)
devtools::install_github(c("ramnathv/rCharts",
"hadley/httr",
"hadley/readr",
"hadley/tidyr",
"hadley/readxl",
"rstudio/shiny",
"vnijs/radiant",
"hadley/lubridate"
)
)
devtools::build_vignettes(c("ramnathv/rCharts",
"hadley/httr",
"hadley/readr",
"hadley/tidyr",
"hadley/readxl",
"rstudio/shiny",
"vnijs/radiant",
"hadley/lubridate"
), dependencies = T
)
devtools::install_github(c("ramnathv/rCharts",
"hadley/httr",
"hadley/readr",
"hadley/tidyr",
"hadley/readxl",
"rstudio/shiny",
"vnijs/radiant",
"hadley/lubridate"
), dependencies = T, build_vignettes =  T
)
devtools::install_github("rich-iannone/DiagrammeR", dependencies = T, build_vignettes = T)
devtools::install_github("vnijs/radiant", dependencies = T, build_vignettes = T)
devtools::install_github("johnmyleswhite/ProjectTemplate", dependencies = T, build_vignettes = T)
devtools::install_github("yihui/roxygen2", dependencies = T, build_vignettes = T)
devtools::install_github("rstats-db/DBI", dependencies = T, build_vignettes = T)
devtools::install_github("prestodb/RPresto", dependencies = T, build_vignettes = T)
devtools::install_github("rstudio/profvis", dependencies = T, build_vignettes = T)
devtools::install_github("rstudio/flexdashboard", dependencies = T, build_vignettes = T)
devtools::install_github("rstudio/RxODE", dependencies = T, build_vignettes = T)
devtools::install_github("rstudio/config", dependencies = T, build_vignettes = T)
install.packages("rgdal", type = "source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.11/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
install.packages("rgeos", type = "source")
devtools::install_github("ropensci/geojsonio")
library(ggplot2)
library(randomForest)
install.packages("randomForest")
library(randomForest)
set.seed(1)
setwd("~/hd_r_series/dm_slides/Titanic")
train <- read.csv("../input/train.csv", stringsAsFactors=FALSE)
train <- read.csv("/input/train.csv", stringsAsFactors=FALSE)
train <- read.csv("~/input/train.csv", stringsAsFactors=FALSE)
train <- read.csv("input/train.csv", stringsAsFactors=FALSE)
test  <- read.csv("input/test.csv",  stringsAsFactors=FALSE)
View(test)
View(train)
extractFeatures <- function(data) {
features <- c("Pclass",
"Age",
"Sex",
"Parch",
"SibSp",
"Fare",
"Embarked")
fea <- data[,features]
fea$Age[is.na(fea$Age)] <- -1
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)
fea$Embarked[fea$Embarked==""] = "S"
fea$Sex      <- as.factor(fea$Sex)
fea$Embarked <- as.factor(fea$Embarked)
return(fea)
}
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
class(rf)
type(rf)
dim(rf)
attributes(rf)
string(rf)
str(rf)
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
submission$Survived <- predict(rf, extractFeatures(test)) #attach predictions
View(submission)
imp <- importance(rf, type=1)
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
p
rf$forest$xlevels$Fare
rf$predicted
library(h2o)
localH2O = h2o.init()
rf2 <- extractFeatures(train)
rf2$Survived <- as.factor(train$Survived)
h2o_tf <- as.h2o(rf2)
r
rf <- h2o.randomForest(training_frame=h2o_tf, x=names(extractFeatures(train)), y="Survived",
ntrees = 1000, mtries = 7)
library(dplyr)
submission2 <- data.frame(PassengerId = test$PassengerId)
pred_df <- extractFeatures(test) %>% as.h2o()
data <- h2o.predict(rf, pred_df)
submission2$Survived <- as.data.frame(data)[,1]
submission2 <- data.frame(PassengerId = test$PassengerId)
submission2$Survived <- predict(rf, extractFeatures(test))
submission2 <- as.h2o(submission2)
submission2$Survived <- predict(rf, extractFeatures(test))
submission2$Survived <- predict(as.h2o(rf), extractFeatures(test))
submission2$Survived <- predict(rf %>% as.h2o(.), extractFeatures(test))
submission2$Survived <- predict(rf, extractFeatures(test))
rf2 <- as.h2o(rf)
submission2$Survived <- predict(rf, extractFeatures(test))
submission2$Survived <- randomForest::predict(rf, extractFeatures(test))
h2o.shutdown(localH2O)
h2o.shutdown(localH2O, prompt = FALSE)
h2o.shutdown(localH2O, prompt = TRUE)
h2o.shutdown(prompt = TRUE)
install.packages("cvAUC")
setwd("~/hd_r_series/dm_slides")
install.packages("doParallel")
list.of.packages <- c(devtools, pacman, DT, ggthemes,
gridExtra, psych, RColorBrewer, reshape2,
RJDBC, rjson, rJava, rgeos, RODBC, scales,
XLConnect, XLConnectJars, UScensus2010blkgrp,
ggplot2, geoR, ggvis, mapdata, maps,
maptools, RandomFields, plotKML, rgdal,
shapefiles, sp, spatstat, raster, rasterVis, rts,
USAboundaries, UScensus2010)
list.of.packages <- (c(devtools, pacman, DT, ggthemes,
gridExtra, psych, RColorBrewer, reshape2,
RJDBC, rjson, rJava, rgeos, RODBC, scales,
XLConnect, XLConnectJars, UScensus2010blkgrp,
ggplot2, geoR, ggvis, mapdata, maps,
maptools, RandomFields, plotKML, rgdal,
shapefiles, sp, spatstat, raster, rasterVis, rts,
USAboundaries, UScensus2010))
new.packages <- list.of.packages[!(list.of.packages
%in% installed.packages()[,Package])
]
list.of.packages <- c('devtools', 'pacman', 'DT', 'ggthemes',
'gridExtra', 'psych', 'RColorBrewer', 'reshape2',
'RJDBC', 'rjson', 'rJava', 'rgeos', 'RODBC', 'scales',
'XLConnect', 'XLConnectJars', 'UScensus2010blkgrp',
'ggplot2', 'geoR', 'ggvis', 'mapdata', 'maps',
'maptools', 'RandomFields', 'plotKML', 'rgdal',
'shapefiles', 'sp', 'spatstat', 'raster', 'rasterVis', 'rts',
'USAboundaries', 'UScensus2010')
new.packages <- list.of.packages[!(list.of.packages
%in% installed.packages()[,Package])
]
installed.packages()
df <- as.data.frame(installed.packages())
View(df)
df1 <- installed.packages()
df1[,"Package"]
name <- "Nick"
if(name=="Nick") TRUE else FALSE
# But what if name is never set to "Nick"?
name <- NA
if(name=="Nick") TRUE else FALSE
if(identical(name, "Nick")) TRUE else FALSE
name <- "Nick"
if(name=="Nick") TRUE else FALSE
